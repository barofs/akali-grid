/* TODO:
     * General utilies
        left-floated, left-aligned
        reverse order on mobile...
*/

$grid-total-columns: 12;
$min-tablet-width:   48em;
$min-computer-width: 75em;
$one-wide:           100% / 12;

@function wideWidth($number) {
  @return ($number * $one-wide);
}

@function wideSettings($number) {
  @return 0 wideWidth($number);
}

$wides: twelve eleven ten nine eight seven six five four three two one;

@mixin calculate-offset($wide) {
  margin-left: $wide * $one-wide;
}

@mixin row($mobile: auto, $tablet: auto, $computer: auto, $centered: false, $vertical-centered: false, $reversed: false, $stackable: false, $reversed-stackable: false, $mobile-visible: true, $tablet-visible: true, $computer-visible: true){
  display: flex;
  flex-wrap: wrap;
  box-sizing: border-box;

  @if $centered == true {
    justify-content: center;
  }

  @if $vertical-centered == true {
    align-items: center;
  }

  @if $reversed == true {
    flex-direction: row-reverse;
  }

  @if $mobile != auto {
    @if $stackable == false {
      & > * {
        flex: 0 ($grid-total-columns/$mobile)*$one-wide !important;
      }
    } @else {
      & > * {
        flex: 0 100%;
      }

      @if $reversed-stackable == true {
        flex-direction: row-reverse;
      }
    }
  }

  @if $mobile-visible == false { display: none; }

  @if $tablet != auto {
    @media all and (min-width: $min-tablet-width) {
      & > * {
        flex: 0 ($grid-total-columns/$tablet)*$one-wide !important;
      }

      @if $tablet-visible == false { display: none; }
    }
  }

  @if $computer != auto {
    @media all and (min-width: $min-computer-width) {
      & > * {
        flex: 0 ($grid-total-columns/$computer)*$one-wide !important;
      }

      @if $computer-visible == false { display: none; }
    }
  }
}

@mixin column ($mobile: auto, $tablet: auto, $computer: auto, $mobile-visible: true, $tablet-visible: true, $computer-visible: true, $offset: 0, $mobile-offset: 0, $tablet-offset: 0, $computer-offset: 0){
  box-sizing: border-box;

  @if $mobile == auto {
    flex: 1;
  } @else if $mobile == fill{
    flex: 1;
  } @else {
    flex: 0 $mobile * $one-wide;
  }

  @if $offset != 0 {
    @include calculate-offset($offset);
  }

  @if $mobile-visible == false { display: none; }

  @if $tablet != auto {
    @media all and (min-width: $min-tablet-width) {
      @if $tablet == fill {
        flex: 1;
      } @else {
        flex: 0 $tablet * $one-wide;
      }

      @if $offset-tablet == 0 {
        margin-left: 0;
      } @else {
        @include calculate-offset($offset);
      }

      @if $tablet-visible == false { display: none; }
    }
  }

  @if $computer != auto {
    @media all and (min-width: $min-computer-width) {
      @if $computer == fill {
        flex: 1;
      } @else {
        flex: 0 $computer * $one-wide;
      }

      @if $offset-computer == 0 {
        margin-left: 0;
      } @else {
        @include calculate-offset($offset);
      }

      @if $computer-visible == false { display: none; }
    }
  }
}

@mixin container ($fluid: false, $mobile-visible: true, $tablet-visible: true, $computer-visible: true){
  max-width: 100%;
      width: 90%;
  margin: 0 auto;
  box-sizing: border-box;

  @if fluid == true {
    width: 100%;
  }

  @if $mobile-visible == false {
    display: none;
  }

  @if $tablet-visible == false {
    @media all and (min-width: $min-tablet-width) {
      display: none;
    }
  }

  @if $computer-visible == false {
    @media all and (min-width: $min-computer-width) {
      display: none;
    }
  }
}

@mixin get-wide-settings($wide) {
       @if $wide == twelve { flex: wideSettings(12); }
  @else if $wide == eleven { flex: wideSettings(11); }
  @else if $wide == ten    { flex: wideSettings(10); }
  @else if $wide == nine   { flex: wideSettings(9); }
  @else if $wide == eight  { flex: wideSettings(8); }
  @else if $wide == seven  { flex: wideSettings(7); }
  @else if $wide == six    { flex: wideSettings(6); }
  @else if $wide == five   { flex: wideSettings(5); }
  @else if $wide == four   { flex: wideSettings(4); }
  @else if $wide == three  { flex: wideSettings(3); }
  @else if $wide == two    { flex: wideSettings(3); }
  @else if $wide == one    { flex: wideSettings(1); }
}

@mixin get-offset-value($wide) {
       @if $wide == twelve { margin-left: wideWidth(12); }
  @else if $wide == eleven { margin-left: wideWidth(11); }
  @else if $wide == ten    { margin-left: wideWidth(10); }
  @else if $wide == nine   { margin-left: wideWidth(9); }
  @else if $wide == eight  { margin-left: wideWidth(8); }
  @else if $wide == seven  { margin-left: wideWidth(7); }
  @else if $wide == six    { margin-left: wideWidth(6); }
  @else if $wide == five   { margin-left: wideWidth(5); }
  @else if $wide == four   { margin-left: wideWidth(4); }
  @else if $wide == three  { margin-left: wideWidth(3); }
  @else if $wide == two    { margin-left: wideWidth(3); }
  @else if $wide == one    { margin-left: wideWidth(1); }
}

@mixin generate-grid {

  @each $wide in $wides {
    [class*="#{$wide} wide column"] {
      @include get-wide-settings($wide);
    }
    [class$="offset #{$wide} column"] {
      @include get-offset-value($wide);
    }
  }

  @media all and (min-width: 1px){
    @each $wide in $wides {
      [class*="#{$wide} wide on mobile"].column {
        @include get-wide-settings($wide);
      }
      [class*="offset #{$wide} on mobile"].column {
        @include get-offset-value($wide);
      }
    }
  }

  @media all and (min-width: $min-tablet-width) {
    @each $wide in $wides {
      [class*="#{$wide} wide on tablet"].column {
        @include get-wide-settings($wide);
      }
      [class*="offset #{$wide} on tablet"].column {
        @include get-offset-value($wide);
      }
    }
  }

  @media all and (min-width: $min-computer-width) {
    @each $wide in $wides {
      [class*="#{$wide} wide on computer"].column {
        @include get-wide-settings($wide);
      }
      [class*="offset #{$wide} on computer"].column {
        @include get-offset-value($wide);
      }
    }
  }
}


.row {
  display: flex;
  flex-wrap: wrap;
  box-sizing: border-box;

  .column {
    box-sizing: border-box;
  }

  &.centered {
    text-align: center;
  }
  
  &.centered:not([class*="only text"]) {
    justify-content: center;
  }

  &.all.centered {
    align-items: center;
  }
  
  &.reversed {
    flex-direction: row-reverse;
  }
  
  &:not(.column) .column:not(.wide) {
    flex: 1;
  }
  
  .fill.column {
    flex: 1;
  }
  
  .container {
    max-width: 100%;
        width: 90%;
    margin: 0 auto;
    box-sizing: border-box;
  }
  
  .fluid.container {
    width: 100%;
  }

  @include generate-grid();

  &[class*="one column"] .column {
    flex: 0 (12/1)*$one-wide;
  }

  &[class*="two column"] .column {
    flex: 0 (12/2)*$one-wide;
  }

  &[class*="three column"] .column {
    flex: 0 (12/3)*$one-wide;
  }

  &[class*="four column"] .column {
    flex: 0 (12/4)*$one-wide;
  }

  &[class*="five column"] .column {
    flex: 0 (12/5)*$one-wide;
  }

  &[class*="six column"] .column {
    flex: 0 (12/6)*$one-wide;
  }

  &[class*="seven column"] .column {
    flex: 0 (12/7)*$one-wide;
  }

  &[class*="eight column"] .column {
    flex: 0 (12/8)*$one-wide;
  }

  &[class*="nine column"] .column {
    flex: 0 (12/9)*$one-wide;
  }

  &[class*="ten column"] .column {
    flex: 0 (12/10)*$one-wide;
  }

  &[class*="eleven column"] .column {
    flex: 0 (12/11)*$one-wide;
  }

  &[class*="twelve column"] .column {
    flex: 0 (12/12)*$one-wide;
  }
  
  @media all and (max-width: $min-computer-width - .1em){
    &.stackable .column {
      flex: 0 100%;
    }
  
    &.reversed.stackable {
      flex-direction: column-reverse;
    }

    [class*="fill on mobile"].column {
      flex: 1 !important;
    }

    [class*="computer only"].column,
    [class*="tablet only"].column,
    [class*="tablet and computer only"].column {
      display: none;
    }

    [class*="mobile and tablet only"].column,
    [class*="mobile and computer only"].column {
      display: block;
    }
  }

  @media all and (min-width: $min-tablet-width) and (max-width: $min-computer-width - .1em) {
    [class*="fill on tablet"].column {
      flex: 1 !important;
    }

    [class*="mobile only"].column,
    [class*="computer only"].column,
    [class*="mobile and computer only"].column {
      display: none;
    }

    [class*="tablet only"].column {
      display: block;
    }

    [class*="mobile and tablet only"].column,
    [class*="tablet and computer only"].column {
      display: block;
    }
  }

  @media all and (min-width: $min-tablet-width) {
    [class*="offset zero on tablet"].column {
      margin-left: 0;
    }
  }
  
  @media all and (min-width: $min-computer-width) {
    [class*="fill on computer"].column {
      flex: 1 !important;
    }

    [class*="mobile only"].column,
    [class*="tablet only"].column,
    [class*="mobile and tablet only"].column  {
      display: none;
    }

    [class*="computer only"].column {
      display: block;
    }

    [class*="mobile and computer only"].column,
    [class*="tablet and computer only"].column {
      display: block;
    }

    [class*="offset zero on computer"].column {
      margin-left: 0;
    }
  }
  
}